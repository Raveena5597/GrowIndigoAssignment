{"version":3,"sources":["../source/AsYouType.js"],"names":["Metadata","PhoneNumber","AsYouTypeState","AsYouTypeFormatter","DIGIT_PLACEHOLDER","AsYouTypeParser","extractFormattedDigitsAndPlus","autoCorrectInternationalNumberWithoutPlus","findCountryCode","USE_NON_GEOGRAPHIC_COUNTRY_CODE","AsYouType","optionsOrDefaultCountry","metadata","getCountryAndCallingCode","defaultCountry","defaultCallingCode","reset","hasCountry","undefined","isNonGeographicCallingCode","text","parser","input","state","digits","justLeadingPlus","formattedOutput","determineTheCountryIfNeeded","nationalSignificantNumber","formatter","narrowDownMatchingFormats","formattedNationalNumber","hasSelectedNumberingPlan","format","reExtractNationalSignificantNumber","nationalDigits","getNationalDigits","getFullNumber","getNonFormattedNumber","onCountryChange","country","onCallingCodeChange","callingCode","selectNumberingPlan","numberingPlan","onNationalSignificantNumberChange","international","getCallingCode","countryCode","isCountryCallingCodeAmbiguous","determineTheCountry","isInternational","prefix","getInternationalPrefixBeforeCountryCallingCode","IDDPrefix","spacing","getDigitsWithoutInternationalPrefix","complexPrefixBeforeNationalSignificantNumber","nationalPrefix","number","nationalSignificantNumberMatchesInput","getNonFormattedNationalNumberWithPrefix","replace","countryCodes","getCountryCodesForCallingCode","length","setCountry","carrierCode","getCountry","getCountryCallingCode","autoCorrected","nationalNumber","phoneNumber","getNumber","isPossible","isValid","getTemplate","getNonFormattedTemplate"],"mappings":"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","sourcesContent":["import Metadata from './metadata'\r\nimport PhoneNumber from './PhoneNumber'\r\nimport AsYouTypeState from './AsYouTypeState'\r\nimport AsYouTypeFormatter, { DIGIT_PLACEHOLDER } from './AsYouTypeFormatter'\r\nimport AsYouTypeParser, { extractFormattedDigitsAndPlus, autoCorrectInternationalNumberWithoutPlus } from './AsYouTypeParser'\r\nimport { findCountryCode } from './parse_'\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\nexport default class AsYouType {\r\n\t/**\r\n\t * @param {(string|object)?} [optionsOrDefaultCountry] - The default country used for parsing non-international phone numbers. Can also be an `options` object.\r\n\t * @param {Object} metadata\r\n\t */\r\n\tconstructor(optionsOrDefaultCountry, metadata) {\r\n\t\tthis.metadata = new Metadata(metadata)\r\n\t\tconst [defaultCountry, defaultCallingCode] = this.getCountryAndCallingCode(optionsOrDefaultCountry)\r\n\t\tthis.defaultCountry = defaultCountry\r\n\t\tthis.defaultCallingCode = defaultCallingCode\r\n\t\tthis.reset()\r\n\t}\r\n\r\n\tgetCountryAndCallingCode(optionsOrDefaultCountry) {\r\n\t\t// Set `defaultCountry` and `defaultCallingCode` options.\r\n\t\tlet defaultCountry\r\n\t\tlet defaultCallingCode\r\n\t\t// Turns out `null` also has type \"object\". Weird.\r\n\t\tif (optionsOrDefaultCountry) {\r\n\t\t\tif (typeof optionsOrDefaultCountry === 'object') {\r\n\t\t\t\tdefaultCountry = optionsOrDefaultCountry.defaultCountry\r\n\t\t\t\tdefaultCallingCode = optionsOrDefaultCountry.defaultCallingCode\r\n\t\t\t} else {\r\n\t\t\t\tdefaultCountry = optionsOrDefaultCountry\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (defaultCountry && !this.metadata.hasCountry(defaultCountry)) {\r\n\t\t\tdefaultCountry = undefined\r\n\t\t}\r\n\t\tif (defaultCallingCode) {\r\n\t\t\t/* istanbul ignore if */\r\n\t\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\t\tif (this.metadata.isNonGeographicCallingCode(defaultCallingCode)) {\r\n\t\t\t\t\tdefaultCountry = '001'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn [defaultCountry, defaultCallingCode]\r\n\t}\r\n\r\n\t/**\r\n\t * Inputs \"next\" phone number characters.\r\n\t * @param  {string} text\r\n\t * @return {string} Formatted phone number characters that have been input so far.\r\n\t */\r\n\tinput(text) {\r\n\t\tconst {\r\n\t\t\tdigits,\r\n\t\t\tjustLeadingPlus\r\n\t\t} = this.parser.input(text, this.state)\r\n\t\tif (justLeadingPlus) {\r\n\t\t\tthis.formattedOutput = '+'\r\n\t\t} else if (digits) {\r\n\t\t\tthis.determineTheCountryIfNeeded()\r\n\t\t\t// Match the available formats by the currently available leading digits.\r\n\t\t\tif (this.state.nationalSignificantNumber) {\r\n\t\t\t\tthis.formatter.narrowDownMatchingFormats(this.state)\r\n\t\t\t}\r\n\t\t\tlet formattedNationalNumber\r\n\t\t\tif (this.metadata.hasSelectedNumberingPlan()) {\r\n\t\t\t\tformattedNationalNumber = this.formatter.format(digits, this.state)\r\n\t\t\t}\r\n\t\t\tif (formattedNationalNumber === undefined) {\r\n\t\t\t\t// See if another national (significant) number could be re-extracted.\r\n\t\t\t\tif (this.parser.reExtractNationalSignificantNumber(this.state)) {\r\n\t\t\t\t\t// If it could, then re-try formatting the new national (significant) number.\r\n\t\t\t\t\tconst nationalDigits = this.state.getNationalDigits()\r\n\t\t\t\t\tif (nationalDigits) {\r\n\t\t\t\t\t\tformattedNationalNumber = this.formatter.format(nationalDigits, this.state)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.formattedOutput = formattedNationalNumber\r\n\t\t\t\t? this.getFullNumber(formattedNationalNumber)\r\n\t\t\t\t: this.getNonFormattedNumber()\r\n\t\t}\r\n\t\treturn this.formattedOutput\r\n\t}\r\n\r\n\treset() {\r\n\t\tthis.state = new AsYouTypeState({\r\n\t\t\tonCountryChange: (country) => {\r\n\t\t\t\t// Before version `1.6.0`, the official `AsYouType` formatter API\r\n\t\t\t\t// included the `.country` property of an `AsYouType` instance.\r\n\t\t\t\t// Since that property (along with the others) have been moved to\r\n\t\t\t\t// `this.state`, `this.country` property is emulated for compatibility\r\n\t\t\t\t// with the old versions.\r\n\t\t\t\tthis.country = country\r\n\t\t\t},\r\n\t\t\tonCallingCodeChange: (country, callingCode) => {\r\n\t\t\t\tthis.metadata.selectNumberingPlan(country, callingCode)\r\n\t\t\t\tthis.formatter.reset(this.metadata.numberingPlan, this.state)\r\n\t\t\t\tthis.parser.reset(this.metadata.numberingPlan)\r\n\t\t\t}\r\n\t\t})\r\n\t\tthis.formatter = new AsYouTypeFormatter({\r\n\t\t\tstate: this.state,\r\n\t\t\tmetadata: this.metadata\r\n\t\t})\r\n\t\tthis.parser = new AsYouTypeParser({\r\n\t\t\tdefaultCountry: this.defaultCountry,\r\n\t\t\tdefaultCallingCode: this.defaultCallingCode,\r\n\t\t\tmetadata: this.metadata,\r\n\t\t\tstate: this.state,\r\n\t\t\tonNationalSignificantNumberChange: () => {\r\n\t\t\t\tthis.determineTheCountryIfNeeded()\r\n\t\t\t\tthis.formatter.reset(this.metadata.numberingPlan, this.state)\r\n\t\t\t}\r\n\t\t})\r\n\t\tthis.state.reset(this.defaultCountry, this.defaultCallingCode)\r\n\t\tthis.formattedOutput = ''\r\n\t\treturn this\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the phone number is being input in international format.\r\n\t * In other words, returns `true` if and only if the parsed phone number starts with a `\"+\"`.\r\n\t * @return {boolean}\r\n\t */\r\n\tisInternational() {\r\n\t\treturn this.state.international\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the \"country calling code\" part of the phone number.\r\n\t * Returns `undefined` if the number is not being input in international format.\r\n\t * Returns \"country calling code\" for \"non-geographic\" phone numbering plans too.\r\n\t * @return {string} [callingCode]\r\n\t */\r\n\tgetCallingCode() {\r\n\t\treturn this.state.callingCode\r\n\t}\r\n\r\n\t// A legacy alias.\r\n\tgetCountryCallingCode() {\r\n\t\treturn this.getCallingCode()\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a two-letter country code of the phone number.\r\n\t * Returns `undefined` for \"non-geographic\" phone numbering plans.\r\n\t * Returns `undefined` if no phone number has been input yet.\r\n\t * @return {string} [country]\r\n\t */\r\n\tgetCountry() {\r\n\t\tconst { digits, country } = this.state\r\n\t\t// If no digits have been input yet,\r\n\t\t// then `this.country` is the `defaultCountry`.\r\n\t\t// Won't return the `defaultCountry` in such case.\r\n\t\tif (!digits) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tlet countryCode = country\r\n\t\t/* istanbul ignore if */\r\n\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\t// `AsYouType.getCountry()` returns `undefined`\r\n\t\t\t// for \"non-geographic\" phone numbering plans.\r\n\t\t\tif (countryCode === '001') {\r\n\t\t\t\tcountryCode = undefined\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn countryCode\r\n\t}\r\n\r\n\tdetermineTheCountryIfNeeded() {\r\n\t\t// Suppose a user enters a phone number in international format,\r\n\t\t// and there're several countries corresponding to that country calling code,\r\n\t\t// and a country has been derived from the number, and then\r\n\t\t// a user enters one more digit and the number is no longer\r\n\t\t// valid for the derived country, so the country should be re-derived\r\n\t\t// on every new digit in those cases.\r\n\t\t//\r\n\t\t// If the phone number is being input in national format,\r\n\t\t// then it could be a case when `defaultCountry` wasn't specified\r\n\t\t// when creating `AsYouType` instance, and just `defaultCallingCode` was specified,\r\n\t\t// and that \"calling code\" could correspond to a \"non-geographic entity\",\r\n\t\t// or there could be several countries corresponding to that country calling code.\r\n\t\t// In those cases, `this.country` is `undefined` and should be derived\r\n\t\t// from the number. Again, if country calling code is ambiguous, then\r\n\t\t// `this.country` should be re-derived with each new digit.\r\n\t\t//\r\n\t\tif (!this.state.country || this.isCountryCallingCodeAmbiguous()) {\r\n\t\t\tthis.determineTheCountry()\r\n\t\t}\r\n\t}\r\n\r\n\t// Prepends `+CountryCode ` in case of an international phone number\r\n\tgetFullNumber(formattedNationalNumber) {\r\n\t\tif (this.isInternational()) {\r\n\t\t\tconst prefix = (text) => this.formatter.getInternationalPrefixBeforeCountryCallingCode(this.state.IDDPrefix, {\r\n\t\t\t\tspacing: text ? true : false\r\n\t\t\t}) + text\r\n\t\t\tconst { callingCode } = this.state\r\n\t\t\tif (!callingCode) {\r\n\t\t\t\treturn prefix(`${this.state.getDigitsWithoutInternationalPrefix()}`)\r\n\t\t\t}\r\n\t\t\tif (!formattedNationalNumber) {\r\n\t\t\t\treturn prefix(callingCode)\r\n\t\t\t}\r\n\t\t\treturn prefix(`${callingCode} ${formattedNationalNumber}`)\r\n\t\t}\r\n\t\treturn formattedNationalNumber\r\n\t}\r\n\r\n\tgetNonFormattedNationalNumberWithPrefix() {\r\n\t\tconst {\r\n\t\t\tnationalSignificantNumber,\r\n\t\t\tcomplexPrefixBeforeNationalSignificantNumber,\r\n\t\t\tnationalPrefix\r\n\t\t} = this.state\r\n\t\tlet number = nationalSignificantNumber\r\n\t\tconst prefix = complexPrefixBeforeNationalSignificantNumber || nationalPrefix\r\n\t\tif (prefix) {\r\n\t\t\tnumber = prefix + number\r\n\t\t}\r\n\t\treturn number\r\n\t}\r\n\r\n\tgetNonFormattedNumber() {\r\n\t\tconst { nationalSignificantNumberMatchesInput } = this.state\r\n\t\treturn this.getFullNumber(\r\n\t\t\tnationalSignificantNumberMatchesInput\r\n\t\t\t\t? this.getNonFormattedNationalNumberWithPrefix()\r\n\t\t\t\t: this.state.getNationalDigits()\r\n\t\t)\r\n\t}\r\n\r\n\tgetNonFormattedTemplate() {\r\n\t\tconst number = this.getNonFormattedNumber()\r\n\t\tif (number) {\r\n\t\t\treturn number.replace(/[\\+\\d]/g, DIGIT_PLACEHOLDER)\r\n\t\t}\r\n\t}\r\n\r\n\tisCountryCallingCodeAmbiguous() {\r\n\t\tconst { callingCode } = this.state\r\n\t\tconst countryCodes = this.metadata.getCountryCodesForCallingCode(callingCode)\r\n\t\treturn countryCodes && countryCodes.length > 1\r\n\t}\r\n\r\n\t// Determines the country of the phone number\r\n\t// entered so far based on the country phone code\r\n\t// and the national phone number.\r\n\tdetermineTheCountry() {\r\n\t\tthis.state.setCountry(findCountryCode(\r\n\t\t\tthis.isInternational() ? this.state.callingCode : this.defaultCallingCode,\r\n\t\t\tthis.state.nationalSignificantNumber,\r\n\t\t\tthis.metadata\r\n\t\t))\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an instance of `PhoneNumber` class.\r\n\t * Will return `undefined` if no national (significant) number\r\n\t * digits have been entered so far, or if no `defaultCountry` has been\r\n\t * set and the user enters a phone number not in international format.\r\n\t */\r\n\tgetNumber() {\r\n\t\tlet {\r\n\t\t\tnationalSignificantNumber,\r\n\t\t\tcarrierCode\r\n\t\t} = this.state\r\n\t\tif (this.isInternational()) {\r\n\t\t\tif (!this.state.callingCode) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (!this.state.country && !this.defaultCallingCode) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!nationalSignificantNumber) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tconst countryCode = this.getCountry()\r\n\t\tconst callingCode = this.getCountryCallingCode() || this.defaultCallingCode\r\n\t\t// Google's AsYouType formatter supports sort of an \"autocorrection\" feature\r\n\t\t// when it \"autocorrects\" numbers that have been input for a country\r\n\t\t// with that country's calling code.\r\n\t\t// Such \"autocorrection\" feature looks weird, but different people have been requesting it:\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/376\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/375\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/316\r\n\t\tif (!this.isInternational() && nationalSignificantNumber === this.state.digits) {\r\n\t\t\tconst autoCorrected = autoCorrectInternationalNumberWithoutPlus(\r\n\t\t\t\tthis.state.digits,\r\n\t\t\t\tcountryCode,\r\n\t\t\t\tcallingCode,\r\n\t\t\t\tthis.metadata\r\n\t\t\t)\r\n\t\t\tif (autoCorrected) {\r\n\t\t\t\tnationalSignificantNumber = autoCorrected.nationalNumber\r\n\t\t\t\tcarrierCode = autoCorrected.carrierCode\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst phoneNumber = new PhoneNumber(\r\n\t\t\tcountryCode || callingCode,\r\n\t\t\tnationalSignificantNumber,\r\n\t\t\tthis.metadata.metadata\r\n\t\t)\r\n\t\tif (carrierCode) {\r\n\t\t\tphoneNumber.carrierCode = carrierCode\r\n\t\t}\r\n\t\t// Phone number extensions are not supported by \"As You Type\" formatter.\r\n\t\treturn phoneNumber\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the phone number is \"possible\".\r\n\t * Is just a shortcut for `PhoneNumber.isPossible()`.\r\n\t * @return {boolean}\r\n\t */\r\n\tisPossible() {\r\n\t\tconst phoneNumber = this.getNumber()\r\n\t\tif (!phoneNumber) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\treturn phoneNumber.isPossible()\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the phone number is \"valid\".\r\n\t * Is just a shortcut for `PhoneNumber.isValid()`.\r\n\t * @return {boolean}\r\n\t */\r\n\tisValid() {\r\n\t\tconst phoneNumber = this.getNumber()\r\n\t\tif (!phoneNumber) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\treturn phoneNumber.isValid()\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * This method is used in `react-phone-number-input/source/input-control.js`\r\n\t * in versions before `3.0.16`.\r\n\t */\r\n\tgetNationalNumber() {\r\n\t\treturn this.state.nationalSignificantNumber\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the template for the formatted phone number.\r\n\t * @return {string}\r\n\t */\r\n\tgetTemplate() {\r\n\t\treturn this.formatter.getTemplate(this.state) || this.getNonFormattedTemplate() || ''\r\n\t}\r\n}"],"file":"AsYouType.js"}