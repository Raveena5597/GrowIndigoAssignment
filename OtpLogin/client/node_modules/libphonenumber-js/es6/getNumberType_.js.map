{"version":3,"sources":["../source/getNumberType_.js"],"names":["Metadata","matchesEntirely","NON_FIXED_LINE_PHONE_TYPES","getNumberType","input","options","metadata","country","selectNumberingPlan","countryCallingCode","nationalNumber","v2","phone","nationalNumberPattern","is_of_type","type","pattern","_type","possibleLengths","indexOf","length"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,YAArB;AACA,SAASC,eAAT,QAAgC,QAAhC;AAEA,IAAMC,0BAA0B,GAChC,CACC,QADD,EAEC,cAFD,EAGC,WAHD,EAIC,aAJD,EAKC,MALD,EAMC,iBAND,EAOC,OAPD,EAQC,KARD,EASC,WATD,CADA,C,CAaA;;AACA,eAAe,SAASC,aAAT,CAAuBC,KAAvB,EAA8BC,OAA9B,EAAuCC,QAAvC,EACf;AACC;AACA;AACAD,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB,CAHD,CAKC;AACA;;AACA,MAAI,CAACD,KAAK,CAACG,OAAX,EAAoB;AACnB;AACA;;AAEDD,EAAAA,QAAQ,GAAG,IAAIN,QAAJ,CAAaM,QAAb,CAAX;AAEAA,EAAAA,QAAQ,CAACE,mBAAT,CAA6BJ,KAAK,CAACG,OAAnC,EAA4CH,KAAK,CAACK,kBAAlD;AAEA,MAAMC,cAAc,GAAGL,OAAO,CAACM,EAAR,GAAaP,KAAK,CAACM,cAAnB,GAAoCN,KAAK,CAACQ,KAAjE,CAfD,CAiBC;AACA;AAEA;;AACA,MAAI,CAACX,eAAe,CAACS,cAAD,EAAiBJ,QAAQ,CAACO,qBAAT,EAAjB,CAApB,EACA;AACC;AACA,GAxBF,CA0BC;;;AACA,MAAIC,UAAU,CAACJ,cAAD,EAAiB,YAAjB,EAA+BJ,QAA/B,CAAd,EACA;AACC;AACA;AACA;AACA;AACA,QAAIA,QAAQ,CAACS,IAAT,CAAc,QAAd,KAA2BT,QAAQ,CAACS,IAAT,CAAc,QAAd,EAAwBC,OAAxB,OAAsC,EAArE,EACA;AACC,aAAO,sBAAP;AACA,KARF,CAUC;AACA;AACA;;;AACA,QAAI,CAACV,QAAQ,CAACS,IAAT,CAAc,QAAd,CAAL,EACA;AACC,aAAO,sBAAP;AACA,KAhBF,CAkBC;AACA;;AACA;;;AACA,QAAID,UAAU,CAACJ,cAAD,EAAiB,QAAjB,EAA2BJ,QAA3B,CAAd,EACA;AACC,aAAO,sBAAP;AACA;;AAED,WAAO,YAAP;AACA;;AAED,2CAAoBJ,0BAApB,2CACA;AADK,QAAMe,KAAK,4BAAX;;AAEJ,QAAIH,UAAU,CAACJ,cAAD,EAAiBO,KAAjB,EAAwBX,QAAxB,CAAd,EACA;AACC,aAAOW,KAAP;AACA;AACD;AACD;AAED,OAAO,SAASH,UAAT,CAAoBJ,cAApB,EAAoCK,IAApC,EAA0CT,QAA1C,EACP;AACCS,EAAAA,IAAI,GAAGT,QAAQ,CAACS,IAAT,CAAcA,IAAd,CAAP;;AAEA,MAAI,CAACA,IAAD,IAAS,CAACA,IAAI,CAACC,OAAL,EAAd,EACA;AACC,WAAO,KAAP;AACA,GANF,CAQC;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAID,IAAI,CAACG,eAAL,MACHH,IAAI,CAACG,eAAL,GAAuBC,OAAvB,CAA+BT,cAAc,CAACU,MAA9C,IAAwD,CADzD,EAEA;AACC,WAAO,KAAP;AACA;;AAED,SAAOnB,eAAe,CAACS,cAAD,EAAiBK,IAAI,CAACC,OAAL,EAAjB,CAAtB;AACA","sourcesContent":["import Metadata from './metadata'\r\nimport { matchesEntirely } from './util'\r\n\r\nconst NON_FIXED_LINE_PHONE_TYPES =\r\n[\r\n\t'MOBILE',\r\n\t'PREMIUM_RATE',\r\n\t'TOLL_FREE',\r\n\t'SHARED_COST',\r\n\t'VOIP',\r\n\t'PERSONAL_NUMBER',\r\n\t'PAGER',\r\n\t'UAN',\r\n\t'VOICEMAIL'\r\n]\r\n\r\n// Finds out national phone number type (fixed line, mobile, etc)\r\nexport default function getNumberType(input, options, metadata)\r\n{\r\n\t// If assigning the `{}` default value is moved to the arguments above,\r\n\t// code coverage would decrease for some weird reason.\r\n\toptions = options || {}\r\n\r\n\t// When `parse()` returned `{}`\r\n\t// meaning that the phone number is not a valid one.\r\n\tif (!input.country) {\r\n\t\treturn\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tmetadata.selectNumberingPlan(input.country, input.countryCallingCode)\r\n\r\n\tconst nationalNumber = options.v2 ? input.nationalNumber : input.phone\r\n\r\n\t// The following is copy-pasted from the original function:\r\n\t// https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\r\n\r\n\t// Is this national number even valid for this country\r\n\tif (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern()))\r\n\t{\r\n\t\treturn\r\n\t}\r\n\r\n\t// Is it fixed line number\r\n\tif (is_of_type(nationalNumber, 'FIXED_LINE', metadata))\r\n\t{\r\n\t\t// Because duplicate regular expressions are removed\r\n\t\t// to reduce metadata size, if \"mobile\" pattern is \"\"\r\n\t\t// then it means it was removed due to being a duplicate of the fixed-line pattern.\r\n\t\t//\r\n\t\tif (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '')\r\n\t\t{\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\t// v1 metadata.\r\n\t\t// Legacy.\r\n\t\t// Deprecated.\r\n\t\tif (!metadata.type('MOBILE'))\r\n\t\t{\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\t// Check if the number happens to qualify as both fixed line and mobile.\r\n\t\t// (no such country in the minimal metadata set)\r\n\t\t/* istanbul ignore if */\r\n\t\tif (is_of_type(nationalNumber, 'MOBILE', metadata))\r\n\t\t{\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\treturn 'FIXED_LINE'\r\n\t}\r\n\r\n\tfor (const _type of NON_FIXED_LINE_PHONE_TYPES)\r\n\t{\r\n\t\tif (is_of_type(nationalNumber, _type, metadata))\r\n\t\t{\r\n\t\t\treturn _type\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function is_of_type(nationalNumber, type, metadata)\r\n{\r\n\ttype = metadata.type(type)\r\n\r\n\tif (!type || !type.pattern())\r\n\t{\r\n\t\treturn false\r\n\t}\r\n\r\n\t// Check if any possible number lengths are present;\r\n\t// if so, we use them to avoid checking\r\n\t// the validation pattern if they don't match.\r\n\t// If they are absent, this means they match\r\n\t// the general description, which we have\r\n\t// already checked before a specific number type.\r\n\tif (type.possibleLengths() &&\r\n\t\ttype.possibleLengths().indexOf(nationalNumber.length) < 0)\r\n\t{\r\n\t\treturn false\r\n\t}\r\n\r\n\treturn matchesEntirely(nationalNumber, type.pattern())\r\n}"],"file":"getNumberType_.js"}